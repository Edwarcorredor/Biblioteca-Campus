/* eslint-disable no-undef */
use("library_Edwar_Corredor");
db.createCollection("users", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["name", "email", "phone", "address", "idNumber"],
      properties: {
        name: {
          bsonType: "string",
          description: "User's name"
        },
        email: {
          bsonType: "string",
          description: "User's email"
        },
        phone: {
          bsonType: "string",
          description: "User's phone number"
        },
        address: {
          bsonType: "string",
          description: "User's address"
        },
        idNumber: {
          bsonType: "string",
          description: "User's ID number"
        }
      }
    }
  }
});

db.createCollection("loans", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["userId", "productId", "startDate", "endDate", "status"],
      properties: {
        userId: {
          bsonType: "int",
          description: "ID of the user who made the loan"
        },
        productId: {
          bsonType: "int",
          description: "ID of the borrowed product"
        },
        startDate: {
          bsonType: "date",
          description: "Start date of the loan"
        },
        endDate: {
          bsonType: "date",
          description: "End date of the loan"
        },
        status: {
          bsonType: "string",
          description: "Loan status (active, expired, returned)",
          enum: ["active", "expired", "returned"]
        }
      }
    }
  }
});

db.createCollection("reservations", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["userId", "productId", "reservationDate", "status"],
      properties: {
        userId: {
          bsonType: "int",
          description: "ID of the user who made the reservation"
        },
        productId: {
          bsonType: "int",
          description: "ID of the reserved product"
        },
        reservationDate: {
          bsonType: "date",
          description: "Reservation date"
        },
        status: {
          bsonType: "string",
          description: "Reservation status (pending, confirmed, canceled)",
          enum: ["pending", "confirmed", "canceled"]
        }
      }
    }
  }
});

db.createCollection("inventory", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["productId", "quantity", "status", "entryDate", "supplier"],
      properties: {
        productId: {
          bsonType: "int",
          description: "ID of the product in inventory"
        },
        quantity: {
          bsonType: "int",
          description: "Quantity available in inventory"
        },
        status: {
          bsonType: "string",
          description: "Product status in inventory"
        },
        entryDate: {
          bsonType: "date",
          description: "Date of entry of the product into inventory"
        },
        supplier: {
          bsonType: "string",
          description: "Product supplier"
        }
      }
    }
  }
});

db.createCollection("products", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["name", "description", "category", "price", "available"],
      properties: {
        name: {
          bsonType: "string",
          description: "Product name"
        },
        description: {
          bsonType: "string",
          description: "Product description"
        },
        category: {
          bsonType: "string",
          description: "Product category"
        },
        price: {
          bsonType: "number",
          description: "Product price"
        },
        available: {
          bsonType: "bool",
          description: "Product availability"
        }       
      }
    }
  }
});
